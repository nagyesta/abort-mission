plugins {
    id 'io.toolebox.git-versioner' version '1.6.5'
}

group = 'com.github.nagyesta.abort-mission'

project.ext {
    gitToken = project.hasProperty('githubToken') ? (project.property('githubToken') as String) : ''
    gitUser = project.hasProperty('githubUser') ? (project.property('githubUser') as String) : ''
    ossrhUser = project.hasProperty('ossrhUsername') ? (project.property('ossrhUsername') as String) : ''
    ossrhPass = project.hasProperty('ossrhPassword') ? (project.property('ossrhPassword') as String) : ''
    repoUrl = 'https://github.com/nagyesta/abort-mission'
    licenseName = 'MIT License'
    licenseUrl = 'https://raw.githubusercontent.com/nagyesta/abort-mission/main/LICENSE'
    maintainerId = 'nagyesta'
    maintainerName = 'Istvan Zoltan Nagy'
    maintainerUrl = 'https://github.com/nagyesta/'
    scmConnection = 'scm:git:https://github.com/nagyesta/abort-mission.git'
    scmProjectUrl = 'https://github.com/nagyesta/abort-mission/'

    // dependency versions
    // minimum supported dependency version
    junit4Version = '4.13'
    jupiterVersion = '5.6.2'
    jupiterReportingVersion = '1.0.0'
    testNgVersion = '7.0.0'
    testSpringBootVersion = '2.3.4.RELEASE'

    // internal build versions
    jupiterTestKitVersion = '1.6.2'
    jupiterPlatformVersion = '5.7.0'
    latestTestNgVersion = '7.3.0'
    mockitoCoreVersion = '3.6.0'
    springBootVersion = '2.4.3'
    springVersion = '5.3.4'
    jdbiVersion = '3.18.0'
    h2Version = '1.4.200'
    gsonVersion = '2.8.6'
    cucumberVersion = '6.5.0'
    slf4jApiVersion = '1.7.30'
    logbackVersion = "1.2.3"
    jsonSchemaValidatorVersion = '1.0.43'
    lombokVersion = '1.18.12'
}

versioner {
    startFrom {
        major = 1
        minor = 1
        patch = 1
    }
    match {
        major = '{major}'
        minor = '{minor}'
        patch = '{patch}'
    }
    pattern {
        pattern = "%M.%m.%p"
    }
    git {
        authentication {
            https {
                token = project.ext.gitToken
            }
        }
    }
    tag {
        prefix = 'v'
        useCommitMessage = true
    }
}

configure(subprojects.findAll({
    !'boosters'.equalsIgnoreCase(it.name) && !'mission-report'.equalsIgnoreCase(it.name)
})) {
    apply plugin: 'java'
    apply plugin: 'checkstyle'
    apply plugin: 'jacoco'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'

    versioner.apply()

    version = rootProject.version
    //noinspection GroovyUnusedAssignment
    sourceCompatibility = '8'
    repositories {
        mavenCentral()
    }

    java {
        withJavadocJar()
        withSourcesJar()
    }

    jacocoTestReport {
        reports {
            xml.enabled true
            xml.destination file("$buildDir/reports/jacoco/report.xml")
            csv.enabled false
            html.enabled true
        }
    }

    test.finalizedBy jacocoTestReport
    jacocoTestReport.finalizedBy jacocoTestCoverageVerification

    jacoco {
        toolVersion = "0.8.2"
    }

    jacocoTestCoverageVerification {
        inputs.file(file("${buildDir}/reports/jacoco/report.xml") as String)
        outputs.file(file("${buildDir}/reports/jacoco/jacocoTestCoverageVerification") as String)

        violationRules {
            rule {
                limit {
                    counter = 'LINE'
                    value = 'COVEREDRATIO'
                    minimum = 0.8
                }
                limit {
                    counter = 'BRANCH'
                    value = 'COVEREDRATIO'
                    minimum = 0.8
                }
                excludes = [
                        "testkit",
                        "booster-junit4"
                ]
            }
            rule {
                element = 'CLASS'
                limit {
                    counter = 'LINE'
                    value = 'COVEREDRATIO'
                    minimum = 0.5
                }
                limit {
                    counter = 'BRANCH'
                    value = 'COVEREDRATIO'
                    minimum = 0.5
                }
                excludes = [
                        "com.github.nagyesta.abortmission.core.LaunchSequenceTemplate",
                        "com.github.nagyesta.abortmission.core.healthcheck.StatisticsLogger",
                        "com.github.nagyesta.abortmission.core.matcher.impl.CustomMatcher",
                        "com.github.nagyesta.abortmission.testkit.spring.StaticFireTestAssets",
                        "com.github.nagyesta.abortmission.testkit.vanilla.FuelTankTestAssets",
                        "com.github.nagyesta.abortmission.testkit.vanilla.ParachuteDropTestAssets",
                        "com.github.nagyesta.abortmission.testkit.NoOpMatcher",
                        "com.github.nagyesta.abortmission.booster.junit4.support.LaunchAbortTestWatcher.1",
                        "com.github.nagyesta.abortmission.reporting.AbortMissionFlightEvaluationReportApp"
                ]
            }
        }
        doLast {
            file("${buildDir}/reports/jacoco/jacocoTestCoverageVerification").write("Passed")
        }
    }
    jar.dependsOn check

    tasks.withType(Checkstyle) {
        configProperties = [base_dir: rootDir.toString(), cache_file: file("${buildDir}/checkstyle/cacheFile")]
        reports {
            xml.enabled false
            html.enabled true
            html.stylesheet resources.text
                    .fromFile(rootProject.file('config/checkstyle/checkstyle-stylesheet.xsl') as String)
        }
    }

    publishing {
        repositories {
            maven {
                name = "GitHubPackages"
                url = uri("https://maven.pkg.github.com/nagyesta/abort-mission")
                credentials {
                    username = rootProject.ext.gitUser
                    password = rootProject.ext.gitToken
                }
            }
            maven {
                name = "ossrh"
                url = uri("https://oss.sonatype.org/service/local/staging/deploy/maven2")
                credentials {
                    username = rootProject.ext.ossrhUser
                    password = rootProject.ext.ossrhPass
                }
            }
        }
    }

    //Disable metadata publishing and rely on Maven only
    tasks.withType(GenerateModuleMetadata) {
        enabled = false
    }
}

repositories {
    mavenCentral()
}

