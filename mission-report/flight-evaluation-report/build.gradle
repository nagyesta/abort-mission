plugins {
    id 'java'
    //noinspection SpellCheckingInspection
    alias(libs.plugins.lombok)
    alias(libs.plugins.minify)
}

group = "${rootProject.group}.reports"

project.ext {
    artifactDisplayName = "Abort Mission - Flight Evaluation Report"
    artifactDescription = "Core reporting module of Abort Mission generating reports from telemetry data."
}

dependencies {
    implementation libs.json.schema.validator
    implementation libs.jackson.databind
    implementation libs.thymeleaf
    implementation libs.thymeleaf.extras.java8time
    implementation libs.bundles.logback.report
    implementation libs.findbugs.jsr305
    annotationProcessor libs.lombok
    testImplementation libs.jupiter.core
    testImplementation libs.mockito.core
}

minification {
    task cssMinifyBase(type: org.gradlewebtools.minify.CssMinifyTask) {
        inputs.files(fileTree("src/main/templates/css", {
            include "**.css"
            exclude "all.min.css"
        }))
        outputs.dir("${buildDir}/css")
        srcDir = file("src/main/templates/css")
        dstDir = file("${buildDir}/css")
        options.createSourceMaps = false
    }
    task jsMinifyBase(type: org.gradlewebtools.minify.JsMinifyTask) {
        inputs.files(fileTree("src/main/templates/js", {
            include "**.js"
            exclude "all.min.js"
        }))
        outputs.dir("${buildDir}/js")
        srcDir = file("src/main/templates/js")
        dstDir = file("${buildDir}/js")
        options.compilationLevel = "WHITESPACE_ONLY"
        options.createSourceMaps = false
    }
}

task combineCss {
    inputs.files(fileTree("${buildDir}/css", {
        include "**.min.css"
    })).ignoreEmptyDirectories()
    outputs.file("${buildDir}/resources/main/templates/css/all.min.css")
    doLast {
        outputs.files.singleFile.withOutputStream { out ->
            def cssRoot = "${buildDir}/css"
            def includes = [
                    file("${cssRoot}/reset.min.css"),
                    file("${cssRoot}/base.min.css"),
                    file("${cssRoot}/colors.min.css"),
                    file("${cssRoot}/columns.min.css"),
                    file("${cssRoot}/rows.min.css"),
                    file("${cssRoot}/stats.min.css")
            ]
            for (file in includes) {
                file.withInputStream {
                    out << "/* ${file.name} */"
                    out << it << '\n'
                }
            }
        }
    }
    dependsOn cssMinifyBase
}

task combineJs {
    inputs.files(fileTree("${buildDir}/js", {
        include "**.min.js"
    })).ignoreEmptyDirectories()
    outputs.file("${buildDir}/resources/main/templates/js/all.min.js")
    doLast {
        outputs.files.singleFile.withOutputStream { out ->
            def jsRoot = "${buildDir}/js"
            def includes = [
                    file("${jsRoot}/toggle.min.js")
            ]
            for (file in includes) {
                file.withInputStream {
                    out << "/* ${file.name} */"
                    out << it << '\n'
                }
            }
        }
    }
    dependsOn jsMinifyBase
}

task processTemplates {
    inputs.file("${buildDir}/resources/main/templates/js/all.min.js")
    inputs.file("${buildDir}/resources/main/templates/css/all.min.css")
    inputs.files(fileTree("src/main/templates/html")).ignoreEmptyDirectories()
    outputs.dir("${buildDir}/resources/main/templates/html")
    doLast {
        for (template in inputs.files) {
            def outFile = file("${buildDir}/resources/main/templates/html/${template.name}")
            outFile.delete()
            template.eachLine { line ->
                outFile.append(line.replaceAll("<!-- [a-zA-Z0-9 ]+ -->", "").trim())
            }
        }
    }
    dependsOn combineCss
    dependsOn combineJs
}

jar {
    manifest {
        attributes "Main-Class": "com.github.nagyesta.abortmission.reporting.AbortMissionFlightEvaluationReportApp"
    }
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

processResources.finalizedBy processTemplates
jar.dependsOn processTemplates
checkstyleMain.dependsOn processTemplates
compileTestJava.dependsOn processTemplates
javadoc.dependsOn processTemplates

test {
    useJUnitPlatform()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifactId = "abort.${project.name}"
            pom {
                name = "${project.artifactDisplayName}"
                description = "${project.artifactDescription}"
                url = rootProject.ext.repoUrl
                packaging = "jar"
                licenses {
                    license {
                        name = rootProject.ext.licenseName
                        url = rootProject.ext.licenseUrl
                    }
                }
                developers {
                    developer {
                        id = rootProject.ext.maintainerId
                        name = rootProject.ext.maintainerName
                        url = rootProject.ext.maintainerUrl
                    }
                }
                scm {
                    connection = rootProject.ext.scmConnection
                    developerConnection = rootProject.ext.scmConnection
                    url = rootProject.ext.scmProjectUrl
                }
                withXml {
                    asNode().dependencies.findAll() {
                        def parent = it.parent()
                        parent.remove(it)
                    }
                }
            }
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}
