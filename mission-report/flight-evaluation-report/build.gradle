plugins {
    id 'java'
    //noinspection SpellCheckingInspection
    alias(libs.plugins.lombok)
    alias(libs.plugins.node)
}

group = "${rootProject.group}.reports"

project.ext {
    artifactDisplayName = "Abort Mission - Flight Evaluation Report"
    artifactDescription = "Core reporting module of Abort Mission generating reports from telemetry data."
}

dependencies {
    implementation libs.json.schema.validator
    implementation libs.jackson.databind
    implementation libs.thymeleaf
    implementation libs.thymeleaf.extras.java8time
    implementation libs.bundles.logback.report
    implementation libs.findbugs.jsr305
    annotationProcessor libs.lombok
    testImplementation libs.jupiter.core
    testImplementation libs.mockito.core
}

node {
    download.set(true)
    nodeProjectDir.set(file("${project.projectDir}/node"))
}

tasks.register('javascriptTest', NpxTask) {
    inputs.files(fileTree("node/src/", {
        include "**.js"
    }))
    inputs.files(fileTree("node/test/", {
        include "**.test.js"
    }))
    command = 'npm'
    group = 'build'
    args = ['test']
    dependsOn nodeSetup
    dependsOn npmSetup
    dependsOn npmInstall
}

tasks.register('cleanTemplates', Delete) {
    delete fileTree("${buildDir}/html-view")
    delete fileTree("${buildDir}/resources/main/templates/html")
}

tasks.register('processTemplates', NpxTask) {
    inputs.files(fileTree("node/src/", {
        include "**.js"
    }))
    inputs.files(fileTree("node/css/", {
        include "**.css"
    }))
    outputs.dir("${buildDir}/html-view")
    outputs.dir("${buildDir}/resources/main/templates/html")
    command = 'grunt'
    group = 'build'
    args = []
    dependsOn javascriptTest
}

jar {
    manifest {
        attributes "Main-Class": "com.github.nagyesta.abortmission.reporting.AbortMissionFlightEvaluationReportApp"
    }
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

processResources.finalizedBy processTemplates
jar.dependsOn processTemplates
checkstyleMain.dependsOn processTemplates
compileTestJava.dependsOn processTemplates
javadoc.dependsOn processTemplates

test {
    useJUnitPlatform()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifactId = "abort.${project.name}"
            pom {
                name = "${project.artifactDisplayName}"
                description = "${project.artifactDescription}"
                url = rootProject.ext.repoUrl
                packaging = "jar"
                licenses {
                    license {
                        name = rootProject.ext.licenseName
                        url = rootProject.ext.licenseUrl
                    }
                }
                developers {
                    developer {
                        id = rootProject.ext.maintainerId
                        name = rootProject.ext.maintainerName
                        url = rootProject.ext.maintainerUrl
                    }
                }
                scm {
                    connection = rootProject.ext.scmConnection
                    developerConnection = rootProject.ext.scmConnection
                    url = rootProject.ext.scmProjectUrl
                }
                withXml {
                    asNode().dependencies.findAll() {
                        def parent = it.parent()
                        parent.remove(it)
                    }
                }
            }
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}
